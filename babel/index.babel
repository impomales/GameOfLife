const DEAD = 0;
const ALIVE = 1;

const SLOW = 300;
const MEDIUM = 100;
const FAST = 50;

// create 2d array of cells.
function create2d(a, b) {
  var matrix = new Array(a);
  for (var i = 0; i < a; i++) {
    matrix[i] = new Array(b);
    for(var j = 0; j < b; j++) {
      // assigned randomly either 0 or 1.
      matrix[i][j] = (Math.random() < 0.5) ? 1 : 0;
    }
  }
  return matrix;
}
// end create2d.

// sums the neighbors at cell(i, j)
// wraps around if index out of bounds.
function sumNeighbors(current, i, j) {
  var iMinus = i - 1;
  var iPlus = i + 1;
  var jMinus = j - 1;
  var jPlus = j + 1;
  
  if ((iPlus) >= current.length) iPlus = 0;
  if ((iMinus) < 0) iMinus = current.length - 1;
  if ((jPlus) >= current[i].length) jPlus = 0;
  if ((jMinus) < 0) jMinus = current[i].length - 1;
  
  return current[iMinus][jMinus]  + current[iMinus][j] +
         current[iMinus][jPlus]   + current[i][jMinus] + 
         current[i][jPlus]        + current[iPlus][jMinus] + 
         current[iPlus][j]        + current[iPlus][jPlus];
}

// updates values for next generation
function nextGeneration(current) {
  var next = create2d(current.length, current[0].length);
  for (var i = 0; i < current.length; i++) {
    for (var j = 0; j < current[i].length; j++) {
      // get neighbors
      var neighbors = sumNeighbors(current, i, j);
      // sum of neighbors and current[i][j]
      var sum = neighbors + current[i][j];
      // rules for next generation.
      
      if (sum === 3) next[i][j] = ALIVE;
      else if (sum === 4) next[i][j] = current[i][j];
      else next[i][j] = DEAD;
      
      /*
      if (current[i][j] === ALIVE) {
        if (neighbors < 2 || neighbors > 3)
          next[i][j] = DEAD;
        else next[i][j] = ALIVE;
      } else {
        if (neighbors === 3) next[i][j] = ALIVE;
        else next[i][j] = DEAD;
      }
      */
      
      
    }
  }
  return next;
}

// main window of game.
var GameView = React.createClass({
  getInitialState: function() {
    // initial default state of game
    return {
      current: create2d(50, 70),
      previous: create2d(50, 70),
      size: [50, 70],
      speed: MEDIUM,
      generation: 0,
      isOn: true
    };
  },
  componentDidMount: function() {
    window.setInterval(this.nextState, this.state.speed);
  },
  nextState: function() {
    var next = nextGeneration(this.state.current);
    this.setState(function(previousState, currentProps) {
      return {current: next, 
              previous: previousState.current,
              generation: previousState.generation + 1};
      }
    );
  },
  render: function() {
    return (
      // GameView
      <div id="GameView">
        <TopControls 
          generation={this.state.generation}
          isOn={this.state.isOn}
          />
        
        {/* matrix */}
        <Matrix current={this.state.current} prev={this.state.previous}/>
        
        <BottomControls 
          size={this.state.size}
          speed={this.state.speed}
          />
      </div>
      // end GameView
    );
  }
  // end render
});
// end main window of game.

// start/pause/clear options, prop: generation.
var TopControls = React.createClass({
  render: function() {
    return (
      <div id="TopControls" className="controls">
        <ul>
          <li><button>Start</button></li>
          <li><button>Pause</button></li>
          <li><button>Clear</button></li>
          <li><button disabled>Generation: {this.props.generation}</button></li>
        </ul>
      </div>
    );
  }
  // end render
});
// end of top controls.

// table of cells.
var Matrix = React.createClass({
  render: function() {
    var rows = [];
    for (var i = 0; i < this.props.current.length; i++) {
      var cells = [];
      for (var j = 0; j < this.props.current[i].length; j++) {
        cells.push(<Cell 
                     state={this.props.current[i][j]}
                     prev={this.props.prev[i][j]}/>);
      }
      rows.push(<CellRow cells={cells}/>);
    }
    return (
      <div id="Matrix">
        <table>
          {rows}
        </table>
      </div>
    );
  }
  // end render
});
// end of table.

// row of cells
var CellRow = React.createClass({
  render: function() {
    return (
      <tr>
        {this.props.cells}
      </tr>
    );
  }
});
// end of row.

// cell, prop: alive/dead, neigbors...maybe as a sum.
var Cell = React.createClass({
  render: function() {
    var color = (this.props.state) ? '#90020d' : '#291013';
    if (this.props.state && this.props.state != this.props.prev) {
      color = '#fb0418';
    }
    var css = {backgroundColor: color};
    return (
      <td><div style={css}></div></td>
    );
  }
});
// end of cell.

// controls for size and speed.
var BottomControls = React.createClass({
  render: function() {
    return (
      <div id="BottomControls" className="controls">
        <ul>
          <li><button disabled>Board Size: </button></li>
          <li><button>30x50</button></li>
          <li><button>50x70</button></li>
          <li><button>80x100</button></li>
        </ul>
        <ul>
          <li><button disabled>Speed: </button></li>
          <li><button>slow</button></li>
          <li><button>medium</button></li>
          <li><button>fast</button></li>
        </ul>
      </div>
    );
  }
  // end render
});
// end of bottom controls.

React.render(<GameView />, document.getElementById('matrix'));