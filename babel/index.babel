/*
  timing
  nextstate calculation
  update state
*/

const DEAD = 0;
const ALIVE = 1;

// create 2d array of dead cells.
function create2d(a, b) {
  var matrix = new Array(a);
  for (var i = 0; i < a; i++) {
    matrix[i] = new Array(b);
    for(var j = 0; j < b; j++) {
      // assigned randomly either 0 or 1.
      matrix[i][j] = Math.floor((Math.random() * 2));
    }
  }
  return matrix;
}
// end create2d.




// main window of game.
var GameView = React.createClass({
  getInitialState: function() {
    // initial default state of game
    return {
      current: create2d(50, 70),
      next: create2d(50, 70),
      size: [50,70],
      speed: 'medium',
      generation: 0,
      isOn: true
    };
  },
  render: function() {
    return (
      // GameView
      <div id="GameView">
        <TopControls 
          generation={this.state.generation}
          isOn={this.state.isOn}
          />
        
        {/* matrix */}
        <Matrix current={this.state.current}/>
        
        <BottomControls 
          size={this.state.size}
          speed={this.state.speed}
          />
      </div>
      // end GameView
    );
  }
  // end render
});
// end main window of game.

// start/pause/clear options, prop: generation.
var TopControls = React.createClass({
  render: function() {
    return (
      <div id="TopControls" className="controls">
        <ul>
          <li><button>Start</button></li>
          <li><button>Pause</button></li>
          <li><button>Clear</button></li>
          <li><button disabled>Generation: {this.props.generation}</button></li>
        </ul>
      </div>
    );
  }
  // end render
});
// end of top controls.

// table of cells.
var Matrix = React.createClass({
  render: function() {
    var rows = [];
    for (var i = 0; i < this.props.current.length; i++) {
      var cells = [];
      for (var j = 0; j < this.props.current[i].length; j++) {
        cells.push(<Cell state={this.props.current[i][j]}/>);
      }
      rows.push(<CellRow cells={cells}/>);
    }
    return (
      <div id="Matrix">
        <table>
          {rows}
        </table>
      </div>
    );
  }
  // end render
});
// end of table.

// row of cells
var CellRow = React.createClass({
  render: function() {
    return (
      <tr>
        {this.props.cells}
      </tr>
    );
  }
});
// end of row.

// cell, prop: alive/dead, neigbors...maybe as a sum.
var Cell = React.createClass({
  render: function() {
    return (
      <td></td>
    );
  }
});
// end of cell.

// controls for size and speed.
var BottomControls = React.createClass({
  render: function() {
    return (
      <div id="BottomControls" className="controls">
        <ul>
          <li><button disabled>Board Size: </button></li>
          <li><button>30x50</button></li>
          <li><button>50x70</button></li>
          <li><button>80x100</button></li>
        </ul>
        <ul>
          <li><button disabled>Speed: </button></li>
          <li><button>slow</button></li>
          <li><button>medium</button></li>
          <li><button>fast</button></li>
        </ul>
      </div>
    );
  }
  // end render
});
// end of bottom controls.

React.render(<GameView />, document.getElementById('matrix'));